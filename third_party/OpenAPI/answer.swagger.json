{
  "swagger": "2.0",
  "info": {
    "title": "answer.proto",
    "version": "version not set"
  },
  "tags": [
    {
      "name": "KeyValueStore"
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/api/v1/kv": {
      "post": {
        "operationId": "KeyValueStore_Create",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/protoCreateResponse"
            }
          },
          "400": {
            "description": "Duplicate key found",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/protoCreateRequest"
            }
          }
        ],
        "tags": [
          "KeyValueStore"
        ]
      },
      "put": {
        "operationId": "KeyValueStore_Update",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/protoUpdateResponse"
            }
          },
          "404": {
            "description": "Key not found",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/protoUpdateRequest"
            }
          }
        ],
        "tags": [
          "KeyValueStore"
        ]
      }
    },
    "/api/v1/kv/{key}": {
      "get": {
        "operationId": "KeyValueStore_Get",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/protoGetResponse"
            }
          },
          "404": {
            "description": "Key not found",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "KeyValueStore"
        ]
      },
      "delete": {
        "operationId": "KeyValueStore_Delete",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/protoDeleteResponse"
            }
          },
          "404": {
            "description": "Key not found",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "KeyValueStore"
        ]
      }
    },
    "/api/v1/kv/{key}/history": {
      "get": {
        "operationId": "KeyValueStore_GetHistory",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/protoGetHistoryResponse"
            }
          },
          "404": {
            "description": "Key not found",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "KeyValueStore"
        ]
      }
    }
  },
  "definitions": {
    "EventItem": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "GetHistoryResponseEvent": {
      "type": "object",
      "properties": {
        "op": {
          "type": "string"
        },
        "item": {
          "$ref": "#/definitions/EventItem"
        }
      }
    },
    "protoCreateRequest": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "protoCreateResponse": {
      "type": "object"
    },
    "protoDeleteResponse": {
      "type": "object"
    },
    "protoGetHistoryResponse": {
      "type": "object",
      "properties": {
        "events": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GetHistoryResponseEvent"
          }
        }
      }
    },
    "protoGetResponse": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "protoUpdateRequest": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "protoUpdateResponse": {
      "type": "object"
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string"
        }
      },
      "additionalProperties": {}
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    }
  }
}
